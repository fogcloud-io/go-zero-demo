// Code generated by goctl. DO NOT EDIT!

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"
	"zero-demo/genModel"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	thirdUsersFieldNames          = builder.RawFieldNames(&ThirdUsers{}, true)
	thirdUsersRows                = strings.Join(thirdUsersFieldNames, ",")
	thirdUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(thirdUsersFieldNames, "id", "create_time", "update_time", "create_t", "update_at"), ",")
	thirdUsersRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(thirdUsersFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))

	cachePublicThirdUsersIdPrefix = "cache:public:thirdUsers:id:"
)

type (
	thirdUsersModel interface {
		Insert(ctx context.Context, data *ThirdUsers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ThirdUsers, error)
		Update(ctx context.Context, data *ThirdUsers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultThirdUsersModel struct {
		sqlc.CachedConn
		table string
	}

	ThirdUsers struct {
		Id           int64         `db:"id"`
		ThirdUserId  string        `db:"third_user_id"`
		AuthProvider string        `db:"auth_provider"`
		NickName     string        `db:"nick_name"`
		AvatarUrl    string        `db:"avatar_url"`
		AccessToken  string        `db:"access_token"`
		CreatedAt    time.Time     `db:"created_at"`
		UpdatedAt    time.Time     `db:"updated_at"`
		IsDeleted    bool          `db:"is_deleted"`
		UserId       sql.NullInt64 `db:"user_id"`
	}
)

func newThirdUsersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultThirdUsersModel {
	return &defaultThirdUsersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."third_users"`,
	}
}

func (m *defaultThirdUsersModel) Delete(ctx context.Context, id int64) error {
	publicThirdUsersIdKey := fmt.Sprintf("%s%v", cachePublicThirdUsersIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicThirdUsersIdKey)
	return err
}

func (m *defaultThirdUsersModel) FindOne(ctx context.Context, id int64) (*ThirdUsers, error) {
	publicThirdUsersIdKey := fmt.Sprintf("%s%v", cachePublicThirdUsersIdPrefix, id)
	var resp ThirdUsers
	err := m.QueryRowCtx(ctx, &resp, publicThirdUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", thirdUsersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, genModel.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultThirdUsersModel) Insert(ctx context.Context, data *ThirdUsers) (sql.Result, error) {
	publicThirdUsersIdKey := fmt.Sprintf("%s%v", cachePublicThirdUsersIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, thirdUsersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ThirdUserId, data.AuthProvider, data.NickName, data.AvatarUrl, data.AccessToken, data.CreatedAt, data.UpdatedAt, data.IsDeleted, data.UserId)
	}, publicThirdUsersIdKey)
	return ret, err
}

func (m *defaultThirdUsersModel) Update(ctx context.Context, data *ThirdUsers) error {
	publicThirdUsersIdKey := fmt.Sprintf("%s%v", cachePublicThirdUsersIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, thirdUsersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.ThirdUserId, data.AuthProvider, data.NickName, data.AvatarUrl, data.AccessToken, data.CreatedAt, data.UpdatedAt, data.IsDeleted, data.UserId)
	}, publicThirdUsersIdKey)
	return err
}

func (m *defaultThirdUsersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicThirdUsersIdPrefix, primary)
}

func (m *defaultThirdUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", thirdUsersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultThirdUsersModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"
	"zero-demo/genModel"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productsFieldNames          = builder.RawFieldNames(&Products{}, true)
	productsRows                = strings.Join(productsFieldNames, ",")
	productsRowsExpectAutoSet   = strings.Join(stringx.Remove(productsFieldNames, "id", "create_time", "update_time", "create_t", "update_at"), ",")
	productsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(productsFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))

	cachePublicProductsIdPrefix         = "cache:public:products:id:"
	cachePublicProductsProductKeyPrefix = "cache:public:products:productKey:"
)

type (
	productsModel interface {
		Insert(ctx context.Context, data *Products) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Products, error)
		FindOneByProductKey(ctx context.Context, productKey string) (*Products, error)
		Update(ctx context.Context, data *Products) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductsModel struct {
		sqlc.CachedConn
		table string
	}

	Products struct {
		Id              int64          `db:"id"`
		ProductKey      string         `db:"product_key"`
		DidCursor       int64          `db:"did_cursor"`
		ProductSecret   string         `db:"product_secret"`
		Name            sql.NullString `db:"name"`
		DeviceType      sql.NullString `db:"device_type"`
		NodeType        sql.NullString `db:"node_type"`
		ProtocolType    sql.NullString `db:"protocol_type"`
		DataFormat      sql.NullString `db:"data_format"`
		Description     sql.NullString `db:"description"`
		AuthType        sql.NullString `db:"auth_type"`
		PhotoUrl        sql.NullString `db:"photo_url"`
		Status          sql.NullString `db:"status"`
		Configuration   sql.NullString `db:"configuration"`
		Script          sql.NullString `db:"script"`
		CreatedAt       time.Time      `db:"created_at"`
		UpdatedAt       time.Time      `db:"updated_at"`
		ReleaseAt       sql.NullTime   `db:"release_at"`
		DynamicRegister bool           `db:"dynamic_register"`
		ValidateType    string         `db:"validate_type"`
		IsDeleted       bool           `db:"is_deleted"`
		ProjectId       sql.NullInt64  `db:"project_id"`
		UserProducts    sql.NullInt64  `db:"user_products"`
		Network         sql.NullInt64  `db:"network"`
	}
)

func newProductsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProductsModel {
	return &defaultProductsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."products"`,
	}
}

func (m *defaultProductsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicProductsIdKey := fmt.Sprintf("%s%v", cachePublicProductsIdPrefix, id)
	publicProductsProductKeyKey := fmt.Sprintf("%s%v", cachePublicProductsProductKeyPrefix, data.ProductKey)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicProductsIdKey, publicProductsProductKeyKey)
	return err
}

func (m *defaultProductsModel) FindOne(ctx context.Context, id int64) (*Products, error) {
	publicProductsIdKey := fmt.Sprintf("%s%v", cachePublicProductsIdPrefix, id)
	var resp Products
	err := m.QueryRowCtx(ctx, &resp, publicProductsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", productsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, genModel.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductsModel) FindOneByProductKey(ctx context.Context, productKey string) (*Products, error) {
	publicProductsProductKeyKey := fmt.Sprintf("%s%v", cachePublicProductsProductKeyPrefix, productKey)
	var resp Products
	err := m.QueryRowIndexCtx(ctx, &resp, publicProductsProductKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where product_key = $1 limit 1", productsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, productKey); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, genModel.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductsModel) Insert(ctx context.Context, data *Products) (sql.Result, error) {
	publicProductsIdKey := fmt.Sprintf("%s%v", cachePublicProductsIdPrefix, data.Id)
	publicProductsProductKeyKey := fmt.Sprintf("%s%v", cachePublicProductsProductKeyPrefix, data.ProductKey)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23)", m.table, productsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductKey, data.DidCursor, data.ProductSecret, data.Name, data.DeviceType, data.NodeType, data.ProtocolType, data.DataFormat, data.Description, data.AuthType, data.PhotoUrl, data.Status, data.Configuration, data.Script, data.CreatedAt, data.UpdatedAt, data.ReleaseAt, data.DynamicRegister, data.ValidateType, data.IsDeleted, data.ProjectId, data.UserProducts, data.Network)
	}, publicProductsIdKey, publicProductsProductKeyKey)
	return ret, err
}

func (m *defaultProductsModel) Update(ctx context.Context, newData *Products) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicProductsIdKey := fmt.Sprintf("%s%v", cachePublicProductsIdPrefix, data.Id)
	publicProductsProductKeyKey := fmt.Sprintf("%s%v", cachePublicProductsProductKeyPrefix, data.ProductKey)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, productsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.ProductKey, newData.DidCursor, newData.ProductSecret, newData.Name, newData.DeviceType, newData.NodeType, newData.ProtocolType, newData.DataFormat, newData.Description, newData.AuthType, newData.PhotoUrl, newData.Status, newData.Configuration, newData.Script, newData.CreatedAt, newData.UpdatedAt, newData.ReleaseAt, newData.DynamicRegister, newData.ValidateType, newData.IsDeleted, newData.ProjectId, newData.UserProducts, newData.Network)
	}, publicProductsIdKey, publicProductsProductKeyKey)
	return err
}

func (m *defaultProductsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicProductsIdPrefix, primary)
}

func (m *defaultProductsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", productsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductsModel) tableName() string {
	return m.table
}
